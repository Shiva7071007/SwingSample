/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Project4;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.TreeMap;

public class Project4 extends JFrame {
    TreeMap<Integer, Property> realEstateDb = new TreeMap<>();

    public enum PROCESS {
        INSERT, DELETE, FIND;
    }

    private JPanel mainPanel;
    private JTextField addressField;
    private JTextField transactionField;
    private JTextField bedroomsField;
    private JTextField squareFootageField;
    private JTextField priceField;
    private JButton processButton;
    private JLabel transactionLabel;
    private JLabel addressLabel;
    private JLabel bedroomsLabel;
    private JLabel squareFootageLabel;
    private JLabel priceLabel;
    private JButton changeStatusButton;
    private JComboBox processComboBox;
    private JComboBox statusComboBox;

    public Project4(String title) {
        super(title);
        this.setContentPane(mainPanel);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.pack();

        intializeButtons();

        processButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                performProcessing();
            }
        });

        changeStatusButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                changeStatus();
            }
        });
    }

    private void performProcessing() {
        try {
            int transactionNumber = getTransactionNumber();
            int processSelectedOption = processComboBox.getSelectedIndex();
            switch (processSelectedOption) {
                case 0:
                    performInsertion(transactionNumber);
                    break;
                case 1:
                    performDeletion(transactionNumber);
                    break;
                case 2:
                    performSearch(transactionNumber);
            }
        } catch (Exception e) {
            showErrorDialouge(e.getMessage());
        }

    }

    private void performInsertion(int transactionNumber) {
        try {
            if (realEstateDb.containsKey(transactionNumber))
                throw new Exception("Transaction number already exist");

            String address = getAddress();
            int bedrooms = getBedrooms();
            int squareFootage = getSquareFootage();
            int price = getPrice();

            Property property = new Property(address, bedrooms, squareFootage, price);

            realEstateDb.put(transactionNumber, property);
            showDialogbox("Success", "Insertion");
        } catch (Exception e) {
            showErrorDialouge(e.getMessage());
        }
    }

    private void performDeletion(int transactionNumber) {
        try {
            if (!realEstateDb.containsKey(transactionNumber))
                throw new Exception("Transaction number doesn't exist");

            realEstateDb.remove(transactionNumber);
            showDialogbox("Success", "Delete");
        } catch (Exception e) {
            showErrorDialouge(e.getMessage());
        }
    }

    private void performSearch(int transactionNumber) {
        try {
            if (!realEstateDb.containsKey(transactionNumber))
                throw new Exception("Transaction number doesn't exist");

            Property property = realEstateDb.get(transactionNumber);
            showDialogbox(property.toString(), "Find");
        } catch (Exception e) {
            showErrorDialouge(e.getMessage());
        }
    }

    private void changeStatus() {
        try {
            int transactionNumber = getTransactionNumber();
            if (!realEstateDb.containsKey(transactionNumber))
                throw new Exception("Transaction number doesn't exist");

            Property property = realEstateDb.get(transactionNumber);

            int statusSelectedOption = statusComboBox.getSelectedIndex();
            property.changeState(STATUS.values()[statusSelectedOption]);
            realEstateDb.replace(transactionNumber, property);
            showDialogbox("Changed state", "Status Update");
        } catch (Exception e) {
            showErrorDialouge(e.getMessage());
        }
    }

    private int getTransactionNumber() throws Exception {
        String transactionFieldValue = transactionField.getText();
        if (!validateIfNumber(transactionFieldValue)) {
            throw new Exception("Transaction No should be a number");
        }
        return Integer.parseInt(transactionFieldValue);
    }

    private String getAddress() throws Exception {
        if (addressField.getText().replaceAll("\\s+", "").length() == 0) {
            throw new Exception("Address field is empty");
        }
        return addressField.getText();
    }

    private int getBedrooms() throws Exception {
        String bedroomFieldValue = bedroomsField.getText();
        if (!validateIfNumber(bedroomFieldValue)) {
            throw new Exception("Bedrooms should be a number");
        }
        return Integer.parseInt(bedroomFieldValue);
    }

    private int getSquareFootage() throws Exception {
        String squareFootageFieldValue = squareFootageField.getText();
        if (!validateIfNumber(squareFootageFieldValue)) {
            throw new Exception("Square Footage should be a number");
        }
        return Integer.parseInt(squareFootageFieldValue);
    }

    private int getPrice() throws Exception {
        String priceFieldValue = priceField.getText();
        if (!validateIfNumber(priceFieldValue)) {
            throw new Exception("Price should be a number");
        }
        return Integer.parseInt(priceFieldValue);
    }

    private void intializeButtons() {
        processComboBox.setModel(new DefaultComboBoxModel<>(PROCESS.values()));
        statusComboBox.setModel(new DefaultComboBoxModel<>(STATUS.values()));
    }

    ////////////////////////////////////////////////////////////
    // Helper Functions //
    ///////////////////////////////////////////////////////////
    public void showDialogbox(String msg, String title) {
        JOptionPane.showMessageDialog(null, msg, title, 1);
    }

    public void showErrorDialouge(String errMsg) {
        JOptionPane.showMessageDialog(null, errMsg, "ERROR", 0);
    }

    protected static boolean validateIfNumber(String input) {
        return input.matches("[0-9]+");
    }

    public static void main(String[] args) {
        JFrame mainFrame = new Project4("Real Estate Database");
        mainFrame.setVisible(true);
    }

    ////////////////////////////////////////////////////////////
    // Intellij Generated Code for swing form binding //
    ///////////////////////////////////////////////////////////

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT
     * edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 2, new Insets(0, 0, 0, 0), -1, -1));
        transactionLabel = new JLabel();
        transactionLabel.setText("Transaction No:");
        mainPanel.add(transactionLabel,
                new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_NONE,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addressLabel = new JLabel();
        addressLabel.setText("Address:");
        mainPanel.add(addressLabel,
                new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_NONE,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addressField = new JTextField();
        mainPanel.add(addressField,
                new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1),
                        null, 0, false));
        bedroomsLabel = new JLabel();
        bedroomsLabel.setText("Bedrooms:");
        mainPanel.add(bedroomsLabel,
                new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_NONE,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        transactionField = new JTextField();
        mainPanel.add(transactionField,
                new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1),
                        null, 0, false));
        bedroomsField = new JTextField();
        mainPanel.add(bedroomsField,
                new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1),
                        null, 0, false));
        squareFootageLabel = new JLabel();
        squareFootageLabel.setText("Square Footage:");
        mainPanel.add(squareFootageLabel,
                new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_NONE,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        squareFootageField = new JTextField();
        mainPanel.add(squareFootageField,
                new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1),
                        null, 0, false));
        priceLabel = new JLabel();
        priceLabel.setText("Price:");
        mainPanel.add(priceLabel,
                new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_NONE,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        priceField = new JTextField();
        mainPanel.add(priceField,
                new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1),
                        null, 0, false));
        processButton = new JButton();
        processButton.setText("Process");
        mainPanel.add(processButton,
                new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
                                | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        changeStatusButton = new JButton();
        changeStatusButton.setText("Change Status");
        mainPanel.add(changeStatusButton,
                new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
                                | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        processComboBox = new JComboBox();
        mainPanel.add(processComboBox,
                new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        statusComboBox = new JComboBox();
        mainPanel.add(statusComboBox,
                new com.intellij.uiDesigner.core.GridConstraints(6, 1, 1, 1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
